generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat {
  chatId                   Int   @id @default(autoincrement()) @map("chat_id")
  matchingId               Int   @map("matching_id")
  senderId                 Int   @map("sender_id")
  receiverId               Int   @map("receiver_id")
  message                  String   @db.VarChar(100)
  createdAt                DateTime @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt                DateTime @default(now()) @db.Timestamp(6) @map("updated_at")
  matching                 matching @relation(fields: [matchingId], references: [matchingId], onDelete: NoAction, onUpdate: NoAction, map: "chatMatchingMatchingIdFk")
  userChatSenderIdToUser   user     @relation("chat_sender_idTouser", fields: [senderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "chatUserUserIdFk")
  userChatReceiverIdToUser user     @relation("chat_receiver_idTouser", fields: [receiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "chatUserUserIdFk2")

  @@index([matchingId], map: "chatMatchingMatchingIdFk")
  @@index([senderId], map: "chatUserUserIdFk")
  @@index([receiverId], map: "chatUserUserIdFk2")
}

model disabledProfile {
  userId                                  Int        @id @map("user_id")
  assistantId                             Int        @map("assistant_id")
  disabledTypeId                          Int        @map("disabed_type_id")
  disabilityLevel                         Int           @map("disability_level")
  description                             String?       @db.VarChar(500)
  createdAt                               DateTime      @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt                               DateTime      @default(now()) @db.Timestamp(6) @map("updated_at")
  disabledType                            disabledType  @relation(fields: [disabledTypeId], references: [disabledTypeId], onDelete: NoAction, onUpdate: NoAction, map: "disabledProfileDisabledTypeDisabledTypeIdFk")
  userDisabledProfileUserIdToUser         user          @relation("disabled_profile_user_idTouser", fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "disabledProfileUserUserIdFk")
  userDisabledProfileAssistantIdToUser    user          @relation("disabled_profile_assistant_idTouser", fields: [assistantId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "disabledProfileUserUserIdFk2")

  @@index([disabledTypeId], map: "disabledProfileDisabledTypeDisabledTypeIdFk")
  @@index([assistantId], map: "disabledProfileUserUserIdFk2")
}

model disabledType {
  disabledTypeId   Int             @id @default(autoincrement()) @map("disabled_type_id")
  name             String             @db.VarChar(100)
  description      String?            @db.VarChar(200)
  createdAt        DateTime           @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt        DateTime           @default(now()) @db.Timestamp(6) @map("updated_at")
  disabledProfile  disabledProfile[]
}

model matching {
  matchingId                          Int            @id @default(autoincrement()) @map("matching_id")
  title                               String            @db.VarChar(50)
  categoryId                          Int            @map("category_id")
  place                               String?           @db.VarChar(100)
  status                              matchingStatus
  description                         String?           @db.VarChar(500)
  authorId                            Int            @map("author_id")
  assistedUserId                      Int            @map("assisted_user_id")
  chat                                chat[]
  matchingCategory                    matchingCategory @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "matchingMatchingCategoryCategoryIdFk")
  userMatchingAuthorIdToUser          user              @relation("matching_author_idTouser", fields: [authorId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "matchingUserUserIdFk")
  userMatchingAssistedUserIdToUser    user              @relation("matching_assisted_user_idTouser", fields: [assistedUserId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "matchingUserUserIdFk2")

  @@index([categoryId], map: "matchingMatchingCategoryCategoryIdFk")
  @@index([authorId], map: "matchingUserUserIdFk")
  @@index([assistedUserId], map: "matchingUserUserIdFk2")
}

model matchingCategory {
  categoryId   Int     @id @default(autoincrement()) @map("category_id")
  name         String     @db.VarChar(30)
  description  String?    @db.VarChar(500)
  createdAt    DateTime   @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt    DateTime   @default(now()) @db.Timestamp(6) @map("updated_at")
  matching     matching[]
}

model user {
  userId                                              Int             @id @default(autoincrement()) @map("user_id")
  profileImage                                        String?            @db.VarChar(1024) @map("profile_image")
  phoneNumber                                         String             @unique @db.VarChar(20) @map("phone_number")
  password                                            String             @db.VarChar(50)
  isDisabled                                          Boolean            @map("is_disabled")
  name                                                String             @db.VarChar(50)
  birthdate                                           DateTime           @db.Date
  residenceArea                                       String             @db.VarChar(50) @map("residence_area")
  createdAt                                           DateTime           @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt                                           DateTime           @default(now()) @db.DateTime(6) @map("updated_at")
  chatChatSenderIdToUser                              chat[]             @relation("chat_sender_idTouser")
  chatChatReceiverIdToUser                            chat[]             @relation("chat_receiver_idTouser")
  disabledProfileDisabledProfileUserIdToUser          disabledProfile?   @relation("disabled_profile_user_idTouser")
  disabledProfileDisabledProfileAssistantIdToUser     disabledProfile[]  @relation("disabled_profile_assistant_idTouser")
  matchingMatchingAuthorIdToUser                      matching[]         @relation("matching_author_idTouser")
  matchingMatchingAssistedUserIdToUser                matching[]         @relation("matching_assisted_user_idTouser")
}

enum matchingStatus {
  pending
  in_progress
  completed
}

