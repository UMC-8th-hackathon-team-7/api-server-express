generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat {
  chat_id                     BigInt   @id @default(autoincrement())
  matching_id                 BigInt
  sender_id                   BigInt
  receiver_id                 BigInt
  message                     String   @db.VarChar(100)
  created_at                  DateTime @default(now()) @db.Timestamp(6)
  updated_at                  DateTime @default(now()) @db.Timestamp(6)
  matching                    matching @relation(fields: [matching_id], references: [matching_id], onDelete: NoAction, onUpdate: NoAction, map: "chat_matching_matching_id_fk")
  user_chat_sender_idTouser   user     @relation("chat_sender_idTouser", fields: [sender_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "chat_user_user_id_fk")
  user_chat_receiver_idTouser user     @relation("chat_receiver_idTouser", fields: [receiver_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "chat_user_user_id_fk_2")

  @@index([matching_id], map: "chat_matching_matching_id_fk")
  @@index([sender_id], map: "chat_user_user_id_fk")
  @@index([receiver_id], map: "chat_user_user_id_fk_2")
}

model disabled_profile {
  user_id                                  BigInt        @id
  assistant_id                             BigInt
  disabed_type_id                          BigInt
  disability_level                         Int
  description                              String?       @db.VarChar(500)
  created_at                               DateTime      @default(now()) @db.Timestamp(6)
  updated_at                               DateTime      @default(now()) @db.Timestamp(6)
  disabled_type                            disabled_type @relation(fields: [disabed_type_id], references: [disabled_type_id], onDelete: NoAction, onUpdate: NoAction, map: "disabled_profile_disabled_type_disabled_type_id_fk")
  user_disabled_profile_user_idTouser      user          @relation("disabled_profile_user_idTouser", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "disabled_profile_user_user_id_fk")
  user_disabled_profile_assistant_idTouser user          @relation("disabled_profile_assistant_idTouser", fields: [assistant_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "disabled_profile_user_user_id_fk_2")

  @@index([disabed_type_id], map: "disabled_profile_disabled_type_disabled_type_id_fk")
  @@index([assistant_id], map: "disabled_profile_user_user_id_fk_2")
}

model disabled_type {
  disabled_type_id BigInt             @id @default(autoincrement())
  name             String             @db.VarChar(100)
  description      String?            @db.VarChar(200)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  disabled_profile disabled_profile[]
}

model matching {
  matching_id                          BigInt            @id @default(autoincrement())
  title                                String            @db.VarChar(50)
  category_id                          BigInt
  place                                String?           @db.VarChar(100)
  status                               matching_status
  description                          String?           @db.VarChar(500)
  author_id                            BigInt
  assisted_user_id                     BigInt
  chat                                 chat[]
  matching_category                    matching_category @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "matching_matching_category_category_id_fk")
  user_matching_author_idTouser        user              @relation("matching_author_idTouser", fields: [author_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "matching_user_user_id_fk")
  user_matching_assisted_user_idTouser user              @relation("matching_assisted_user_idTouser", fields: [assisted_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "matching_user_user_id_fk_2")

  @@index([category_id], map: "matching_matching_category_category_id_fk")
  @@index([author_id], map: "matching_user_user_id_fk")
  @@index([assisted_user_id], map: "matching_user_user_id_fk_2")
}

model matching_category {
  category_id BigInt     @id @default(autoincrement())
  name        String     @db.VarChar(30)
  description String?    @db.VarChar(500)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  matching    matching[]
}

model user {
  user_id                                              BigInt             @id @default(autoincrement())
  profile_image                                        String?            @db.VarChar(1024)
  phone_number                                         String             @db.VarChar(20)
  password                                             String             @db.VarChar(50)
  is_disabled                                          Boolean
  name                                                 String             @db.VarChar(50)
  birthdate                                            DateTime           @db.Date
  residence_area                                       String             @db.VarChar(50)
  created_at                                           DateTime           @default(now()) @db.DateTime(6)
  updated_at                                           DateTime           @default(now()) @db.DateTime(6)
  chat_chat_sender_idTouser                            chat[]             @relation("chat_sender_idTouser")
  chat_chat_receiver_idTouser                          chat[]             @relation("chat_receiver_idTouser")
  disabled_profile_disabled_profile_user_idTouser      disabled_profile?  @relation("disabled_profile_user_idTouser")
  disabled_profile_disabled_profile_assistant_idTouser disabled_profile[] @relation("disabled_profile_assistant_idTouser")
  matching_matching_author_idTouser                    matching[]         @relation("matching_author_idTouser")
  matching_matching_assisted_user_idTouser             matching[]         @relation("matching_assisted_user_idTouser")
}

enum matching_status {
  pending
  in_progress
  completed
}
